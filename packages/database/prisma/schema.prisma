generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views", "multiSchema"]
  engineType      = "binary"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  schemas    = ["users", "chat", "langchain", "extensions"]
  extensions = [pgvector(map: "vector", schema: "extensions")] // Add the pgvector extension
}

model User {
  id           String        @id @default(dbgenerated("gen_random_uuid()"))
  // 
  name         String        @unique
  passwordHash String        @map("password_hash")
  salt         String
  // 
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamp()
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  // 
  ChatSession  ChatSession[]
  Document     Document[]

  // 
  @@map("user")
  @@schema("users")
}

model ChatSession {
  id                String             @id @default(dbgenerated("gen_random_uuid()"))
  // 
  name              String
  // 
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamp()
  updatedAt         DateTime           @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  // 
  User              User               @relation(fields: [userId], references: [id])
  userId            String             @map("user_id")
  // 
  ChatSessionConfig ChatSessionConfig?
  Memory            Memory[]
  SessionDocument   SessionDocument[]

  // 
  @@unique([userId, name], name: "unique_user_name")
  @@index([userId], name: "idx_user_id")
  @@index([createdAt(sort: Desc)], name: "idx_created_at")
  // 
  @@map("session")
  @@schema("chat")
}

model ChatSessionConfig {
  id                String          @id @default(dbgenerated("gen_random_uuid()"))
  // 
  config            Json            @default("{}") @db.JsonB
  // 
  createdAt         DateTime        @default(now()) @map("created_at") @db.Timestamp()
  updatedAt         DateTime        @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  // 
  Session           ChatSession     @relation(fields: [chatSessionId], references: [id])
  GenerationModel   GenerationModel @relation(fields: [generationModelId], references: [id])
  chatSessionId     String          @unique @map("session_id")
  generationModelId String          @map("generation_model_id")

  // 
  @@index([chatSessionId], name: "idx_session_id")
  // 
  @@map("session_config")
  @@schema("chat")
}

model SessionDocument {
  documentId    String      @map("document_id")
  chatSessionId String      @map("session_id")
  Document      Document    @relation(fields: [documentId], references: [id])
  ChatSession   ChatSession @relation(fields: [chatSessionId], references: [id])

  // 
  @@id([documentId, chatSessionId])
  // 
  @@unique([documentId, chatSessionId], name: "unique_session_document_document_session_id")
  // 
  @@index([chatSessionId], name: "idx_session_document_session_id")
  @@index([documentId], name: "idx_session_document_document_id")
  // 
  @@map("session_document")
  @@schema("chat")
}

enum DocumentLanguage {
  cpp
  go
  java
  js
  php
  proto
  python
  rst
  ruby
  rust
  scala
  swift
  markdown
  latex
  html

  @@map("document_language")
  @@schema("langchain")
}

model Document {
  id                        String              @id @default(dbgenerated("gen_random_uuid()"))
  // 
  name                      String
  localLocation             String              @map("local_location")
  content                   String
  contentEmbeddingTruncated Boolean?            @map("content_embedding_truncated")
  // 
  metadata                  Json                @default("{}") @db.Json
  language                  DocumentLanguage?
  global                    Boolean             @default(false)
  // 
  createdAt                 DateTime            @default(now()) @map("created_at") @db.Timestamp()
  updatedAt                 DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  // 
  User                      User                @relation(fields: [userId], references: [id])
  DocumentEmbedding         DocumentEmbedding[]
  userId                    String              @map("user_id")
  SessionDocument           SessionDocument[]

  // 
  @@unique([userId, name], name: "unique_user_name")
  // 
  @@index([userId], name: "idx_user_id")
  @@index([global], name: "idx_global")
  // 
  @@map("document")
  @@schema("langchain")
}

model DocumentEmbedding {
  Document    Document  @relation(fields: [documentId], references: [id])
  documentId  String    @map("document_id")
  Embedding   Embedding @relation(fields: [embeddingId], references: [id])
  embeddingId String    @map("embedding_id")

  // 
  @@id([documentId, embeddingId])
  // 
  @@unique([documentId, embeddingId], name: "unique_document_embedding_document_embedding_id")
  @@index([documentId], name: "idx_document_embedding_document_id")
  @@map("document_embedding")
  @@schema("langchain")
}

model MemoryEmbedding {
  Memory      Memory    @relation(fields: [memoryId], references: [id])
  memoryId    String    @map("memory_id")
  Embedding   Embedding @relation(fields: [embeddingId], references: [id])
  embeddingId String    @map("embedding_id")

  // 
  @@id([memoryId, embeddingId])
  // 
  @@unique([memoryId, embeddingId], name: "unique_memory_embedding_memory_embedding_id")
  @@index([memoryId], name: "idx_memory_embedding_memory_id")
  @@map("memory_embedding")
  @@schema("langchain")
}

model Embedding {
  id                String              @id @default(dbgenerated("gen_random_uuid()"))
  // 
  embedding         Float[]             @map("embedding") @db.DoublePrecision
  // 
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp()
  updatedAt         DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  // 
  EmbeddingModel    EmbeddingModel      @relation(fields: [embeddingModelId], references: [id])
  embeddingModelId  String              @map("embedding_model_id")
  DocuemntEmbedding DocumentEmbedding[]
  MemoryEmbedding   MemoryEmbedding[]

  // 
  @@map("embedding")
  @@schema("langchain")
}

model Memory {
  id                        String            @id @default(dbgenerated("gen_random_uuid()"))
  // 
  question                  String
  response                  String
  contentEmbeddingTruncated Boolean?          @map("content_embedding_truncated")
  // 
  createdAt                 DateTime          @default(now()) @map("created_at") @db.Timestamp()
  updatedAt                 DateTime          @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  // 
  ChatSession               ChatSession       @relation(fields: [chatSessionId], references: [id])
  chatSessionId             String            @unique @map("session_id")
  MemoryEmbedding           MemoryEmbedding[]

  // 
  @@index([chatSessionId], name: "idx_session_id")
  @@index([chatSessionId, createdAt(sort: Desc)], name: "idx_session_id_created_at")
  // 
  @@map("memory")
  @@schema("langchain")
}

model EmbeddingModel {
  id            String      @id @default(dbgenerated("gen_random_uuid()"))
  // 
  name          String      @unique
  contentLength Int
  dimension     Int
  active        Boolean
  // 
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp()
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  // 
  Embedding     Embedding[]

  // 
  @@index([name], name: "idx_embedding_model_name")
  // 
  @@map("embedding_model")
  @@schema("langchain")
}

model GenerationModel {
  id                String              @id @default(dbgenerated("gen_random_uuid()"))
  // 
  name              String              @unique
  active            Boolean
  // 
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp()
  updatedAt         DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamp()
  // 
  ChatSessionConfig ChatSessionConfig[]

  // 
  @@index([name], name: "idx_generation_model_name")
  // 
  @@map("generation_model")
  @@schema("langchain")
}
